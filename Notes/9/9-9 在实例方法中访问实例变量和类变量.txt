1. Python类
a.变量
  类变量
  实例变量
b.方法：
  实例方法
  类方法
  静态方法
c.构造函数

2. 从面向对象的角度讲，方法是类的行为，而变量代表的是刻画这个类的特征。

3. 方法和变量之间的关系：
绝大多数情况下，方法需要对变量做一大系列运算，或者是逻辑上的操作，最终改变变量的状态。

4. 在方法里如何访问变量？
• 实例方法操作实例变量，他们都和对象相关联，容易操作。
• 实例方法内部如何访问类变量？
方法1：
print(Student.sum)
方法2：
print(self.__class__.sum)

5. 构造函数
• 构造函数是特殊的实例方法
• 构造函数和实例方法的区别
a. 函数的调用
构造函数的调用：
student1=Student('石敢当',18)
实例函数的调用：
student1.do_homework()
b. 意义
实例方法的作用是描述类的行为。
构造函数的意义是初始化类的特征和行为。

6. 在实例函数中访问实例变量建议加self。
print(self.name)
变量加self和不加self的意义是不同的。

"""
# 构造函数（可以看作特殊的实例方法）
# 初始化对象的属性
def __init__(self, name, age):

    self.name = name
    self.age = age
    # print(name)  # 读取的是形参name
    print(self.name)  #读取的是对象name
"""

误区：在实例方法的内部通过name进行dict查找是不可以的。这种查找机制在类的外部调用的时候是可以的。
print(self.__dict__)
print(name)