1. Python类
a. 变量
   类变量
   实例变量
b. 方法
   实例方法
   类方法
   静态方法
c. 构造函数
d. 成员可见性
e. 面向对象三大特性
   继承性
   封装性（类就是一种封装，类是从面向对象的角度把一系列变量和相关的方法聚合在一起）
   多态性

 2. 封装性比较抽象，需要靠实践去慢慢理解。

 3. 继承性的作用： 避免定义重复的方法和重复的变量。
 类由两大块组成：
 - 类变量和实例变量
 - 行为方法
举例：
Student本身是一个人，人也是一个类，学生和人之间构成继承关系。
from c13 import Human
class Student(Human):  # 括号里用来填写Student的父类
Human是Student的父类，Student是Human的子类。

4. 子类继承父类的类变量

5. 子类继承父类的实例变量

6. 子类继承父类的方法

7. 一个父类有多个子类，一个子类下面有多个子子类。

8. 大部分编程语言一个子类只能有一个父类， 但是Python是多继承的。 一个子类可以有多个父类。

9. 单继承清晰，多继承灵活。 先掌握单继承。

10. 子类完全继承父类没有意义，子类一般有自己的变量。
def __init__(self, school, name, age):
	# 子类有自己的变量school，但同时还需要继承父类的两个变量，所以构造函数有三个变量
        self.school = school  
        Human.__init__(self, name, age)  
子类是否可以通过显示调用父类构造函数将name和age的值传递到父类？
不可以!
TypeError: __init__() missing 1 required positional argument: 'age'
但是我们传递了'age'，为什么报错？
在传递的构造函数里加一个self就得到正确结果。
Human.__init__(self, name, age) 
一般Python会帮我们自动传入self，我们不需要手动传入，但是这里必须要传入self。
