1. Python类
a. 变量
   类变量
   实例变量
b. 方法
   实例方法
   类方法
   静态方法
c. 构造函数
d. 成员可见性

2. 类有内外之分
a. 类的外部调用
student1.do_homework()  # 在类外部调用方法
b. 类的外部调用
    def do_homework(self):
    	# 在类的内部调用另外一个函数
        self.do_english_homework()
        print('Homework')

    def do_english_homework(self):
        print('English Homework')

student1.do_homework()  # 这里就变成类的外部调用

3. 类的基本作用是封装代码，但是我们定义的所有变量和方法实际上不具有安全性，因为所有的成员都可以从外部访问。
有的时候类下面的实例变量不希望外部做更改，比如说学生分数。
a. 直接改变实例变量
class Student():
    def __init__(self, name, age, score):

        self.name = name
        self.age = age
        self.score = score
        print(self.name + '同学本次考试分数为：' + str(self.score))


student1 = Student('石敢当', 18, 59)
student1.score = -1 # 在类的外部直接修改实例变量
print(student1.name + '同学本次考试分数为：' + str(student1.score))
输出结果：
石敢当同学本次考试分数为：59
石敢当同学本次考试分数为：-1
b. 通过方法修改实例变量
class Student():
    def __init__(self, name, age):

        self.name = name
        self.age = age
        self.score = 0

    def marking(self, score):
        self.score = score
        print(self.name + '同学本次考试分数为：'+ str(self.score))


student1 = Student('石敢当', 18)
student1.marking(59) # 通过调用方法marking修改score
输出结果：
石敢当同学本次考试分数为：59

4. 通过方法比直接做数据修改方便很多。为什么？
直接对实例变量修改没有限制，但是对方法修改可以有限制。
    def marking(self, score):
        if score < 0:
            return '不能够打负分'
        self.score = score
        print(self.name + '同学本次考试分数为：'+ str(self.score))


student1 = Student('石敢当', 18)
result = student1.marking(-1)
print(result)
输出结果：
不能够打负分