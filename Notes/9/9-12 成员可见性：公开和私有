1. Python类
a. 变量
   类变量
   实例变量
b. 方法
   实例方法
   类方法
   静态方法
c. 构造函数
d. 成员可见性

2. 类有内外之分
a. 类的外部调用
student1.do_homework()  # 在类外部调用方法
b. 类的外部调用
    def do_homework(self):
    	# 在类的内部调用另外一个函数
        self.do_english_homework()
        print('Homework')

    def do_english_homework(self):
        print('English Homework')

student1.do_homework()  # 这里就变成类的外部调用

3. 类的基本作用是封装代码，但是我们定义的所有变量和方法实际上不具有安全性，因为所有的成员都可以从外部访问。
有的时候类下面的实例变量不希望外部做更改，比如说学生分数。
a. 直接改变实例变量
class Student():
    def __init__(self, name, age, score):

        self.name = name
        self.age = age
        self.score = score
        print(self.name + '同学本次考试分数为：' + str(self.score))


student1 = Student('石敢当', 18, 59)
student1.score = -1 # 在类的外部直接修改实例变量
print(student1.name + '同学本次考试分数为：' + str(student1.score))
输出结果：
石敢当同学本次考试分数为：59
石敢当同学本次考试分数为：-1
b. 通过方法修改实例变量
class Student():
    def __init__(self, name, age):

        self.name = name
        self.age = age
        self.score = 0

    def marking(self, score):
        self.score = score
        print(self.name + '同学本次考试分数为：'+ str(self.score))


student1 = Student('石敢当', 18)
student1.marking(59) # 通过调用方法marking修改score
输出结果：
石敢当同学本次考试分数为：59

4. 通过方法比直接做数据修改安全很多。为什么？
直接对实例变量修改没有限制，但是对方法修改可以有限制。
    def marking(self, score):
        if score < 0:
            return '不能够打负分'
        self.score = score
        print(self.name + '同学本次考试分数为：'+ str(self.score))


student1 = Student('石敢当', 18)
result = student1.marking(-1)
print(result)
输出结果：
不能够打负分

5. 如果要修改类的特征值，不应该通过直接访问变量的方式改变变量的状态。正确的方式是所有对于类下面变量的更改都应该通过方法来完成。所有的编程语言都这样提倡。

6. Public & Private
a. 公开的变量可以在类的外部直接赋值和读取。
方法前不加双下划线，Python都当作是公开方法。
b. 私有的变量无法在类的外部赋值和读取。
在方法名字前加双下划线可以将方法变为私有。
def __marking(self, score):
在外面调用私有方法会报错。

7. 为什么构造函数前面有双下划线，但任然被认为是公开的？
因为__init__前后都有双下划线，所以任然当作公开的。
def __marking__(self, score):
前后都加双下划线实际上任然是公开方法。
前后都加双下划线是Python内置变量的命名风格，我们尽量不要这样命名。

8. 如果我们不想让别人在外部修改变量，在变量前增加两个下划线把它变为私有的变量。
class Student():
	def __init__(self, name, age):

        self.name = name
        self.age = age
        self.__score = 0

    def __marking(self, score):
        self.__score = score
        print(self.name + '同学本次考试分数为：'+ str(self.__score))

student1.__score = -1

在外部强行调用私有变量不会报错，为什么？